# Yandex / Хендбуки / Основы Python
# 6.3. Модуль requests

import requests
from sys import stdin


def p_6_3_0():
    params = {"ll": "37.677751,55.757718", "spn": "0.016457,0.00619", "l": "map"}

    try:
        response = requests.get("https://static-maps.yandex.ru/1.x/", params)
    except ConnectionError:
        print("Проверьте подключение к Сети.")
    else:
        with open("map.png", "wb") as file:
            file.write(response.content)


def p_6_3_a():
    """
    В локальной сети тестирующей системы работает сервер 127.0.0.1.
    Он слушает порт 5000 и отвечает на запросы.
    Обратитесь к серверу и выведите сообщение, полученное от него.

    Примечания Во всех задачах данной главы используется протокол http
    Не забудьте, что ответ сервера является бинарным объектом
    и его следует декодировать.
    """
    # import requests

    answer = requests.get("http://127.0.0.1:5000")
    message = answer.content.decode()
    print(message)


def p_6_3_b():
    """
    Напишите программу, которая суммирует данные, передаваемые с сервера.
    Если сервер передал число 0, значит, данные закончились и он
    перезапустит выдачу ответов.
    Формат ввода Вводится адрес сервера.
    Формат вывода Одно число — сумма всех данных, полученных с сервера.
    """

    # import requests

    url = input()
    sum = 0
    while True:
        data = requests.get(f"http://{url}")
        num = int(data.text)
        if num == 0:
            break
        sum += num
    print(sum)


def p_6_3_с():
    """
    Сервер отвечает на запрос JSON списком.
    Выведите сумму чисел в полученном списке.
    Формат ввода Вводится адрес сервера
    Формат вывода Одно число — сумма всех чисел в полученном списке.
    """
    # import requests

    url = input()
    data = requests.get(f"http://{url}").json()
    nums = (num for num in data if isinstance(num, (int, float)))
    print(sum(nums))


def p_6_3_d():
    """
    Сервер отвечает на запрос JSON объект. Выведите значение,
    находящееся в объекте по заданному ключу. Если такое
    значение не обнаружено, то выведитесообщение «No data».
    Формат ввода В первой строке вводится адрес сервера.
    Во второй строке — имя ключа.
    Формат вывода Одна строка — значение, полученное по
    заданному ключу, или сообщение «No data».
    """

    # import requests

    url, key = input(), input()
    data = requests.get(f"http://{url}").json()
    print(data.get(key, "No data"))


def p_6_3_e():
    """
    Сервер отвечает на несколько путей, каждый из которых возвращает
    свой JSON список. Напишите программу, которая произведёт сбор и
    суммирование всех данных по заданным путям.
    Формат ввода Вводится адрес сервера и список анализируемых путей.
    Формат вывода Одно число — сумма всех чисел из полученных списков.
    """

    # import requests
    # from sys import stdin

    url = f"http://{input()}"
    links = stdin.readlines()
    res = sum(sum(requests.get(f"{url}{link.rstrip()}").json()) for link in links)
    print(res)


def p_6_3_f():
    """
    На сервере по пути /users, доступен список пользователей,
    представленных JSON объектами с ключами:
    - id — уникальный идентификатор пользователя;
    - username — имя пользователя;
    - last_name — фамилия;
    - first_name — имя;
    - email — адрес электронной почты.
    Формат ввода В первой строке вводится адрес сервера.
    Формат вывода Выведите список всех пользователей
    системы в алфавитном порядке.
    """

    # import requests

    url = f"http://{input()}/users"
    data = requests.get(url).json()
    result = sorted(" ".join((user["last_name"], user["first_name"])) for user in data)
    print(*result, sep="\n")


def p_6_3_g():
    """
    Продолжим работу с сервером из прошлой задачи.
    По пути /users/<id> доступен JSON объект пользователя
    с заданным id. Подготовьте текст письма для отправки
    важной рассылки. Если пользователь с заданным
    идентификатором не найден, выведите сообщение
    «Пользователь не найден».

    Формат ввода В первой строке вводится адрес сервера.
    Во второй строке вводится id пользователя, которому
    требуется отправить письмо. В последующих строках записано
    содержание сообщения с форматированными вставками
    любого из полей объекта.
    Формат вывода Выведите подготовленное сообщение.
    """

    # import requests
    # from sys import stdin

    url = f"http://{input()}/users/{input()}"
    data = requests.get(url)
    message = stdin.read()
    if data.ok:
        user = data.json()
        print(message.format(**user))
    else:
        print("Пользователь не найден")


def p_6_3_h():
    """
    Продолжим работу с сервером из прошлых задач.
    При POST запросе по пути /users доступна возможность
    создания новых пользователей. Для этого в данные запроса
    (data) требуется передать JSON объект с информацией
    о пользователе (без указания идентификатора).
    Напишите программу, которая добавляет нового
    пользователя в систему.

    Формат ввода В первой строке вводится адрес сервера.
    В следующих строках вводятся: имя пользователя,
    фамилия, имя и адрес электронной почты.

    Формат вывода Ничего выводить не требуется.
    """

    # import requests

    url = f"http://{input()}/users"
    data = {
        "username": input(),
        "last_name": input(),
        "first_name": input(),
        "email": input(),
    }
    result = requests.post(url, json=data)


def p_6_3_i():
    """
    Продолжим работу с сервером из прошлых задач.
    При PUT запросе по пути /users/<id> доступна возможность
    изменение информации о пользователе. Для этого в данные
    запроса (data) требуется передать JSON объект с новой
    информацией (без указания идентификатора).
    Напишите программу, которая изменяет информацию о пользователе.

    Формат ввода В первой строке вводится адрес сервера.
    Во второй строке записан идентификатор пользователя,
    информацию о котором требуется изменить. В следующих
    строках вводятся данные для изменения в формате:
    <название поля>=<новое значение>.
    Формат вывода Ничего выводить не требуется.
    """

    # import requests
    # from sys import stdin

    url = f"http://{input()}/users/{input()}"
    user_data = {
        key: value
        for data in stdin.readlines()
        for key, value in [data.rstrip().split("=")]
    }
    result = requests.post(url, json=user_data)


def p_6_3_j():
    """
    Завершим эпопею с сервером из прошлых задач.
    При DELETE запросе по пути /users/<id> производится удаление
    пользователя с заданным идентификатором.
    Напишите программу, которая удаляет пользователя из системы.

    Формат ввода В первой строке вводится адрес сервера.
    Во второй строке записан идентификатор пользователя,
    информацию о котором требуется удалить.

    Формат вывода Ничего выводить не требуется.
    """

    # import requests

    url = f"http://{input()}/users/{input()}"
    result = requests.delete(url)
