# Yandex / Хендбуки / Основы Python
# 2.3. Циклы


def p_2_3_a():
    """
    На новогоднем утреннике в детском саду дети должны прокричать «Три!»,
    чтобы зажглась ёлочка. Но с порядком чисел у них пока сложности –
    они выкрикивают всё подряд.
    Ваша задача — написать программу, которая ждёт правильный крик
    и только после этого зажигает ёлочку.
    Формат ввода Вводятся крики детей.
    Формат вывода Требуется выводить "Режим ожидания...",
    пока дети не прокричат "Три!".
    В конце вывести "Ёлочка, гори!"
    """
    while input() != "Три!":
        print("Режим ожидания...")
    print("Ёлочка, гори!")


def p_2_3_b():
    """
    Долгая поездка в поезде — испытание для родителей.
    Чтобы дети не скучали, они играют в поиск зверушек в
    придорожной растительности. Давайте присоединимся к
    этой игре и посчитаем, в скольких строках встречается зайка!
    А поможет вам в этом цикл while.

    Формат ввода
    Вводятся строки описывающие придорожную местность.
    В конце поездки вводится "Приехали!"

    Формат вывода
    Количество строк в которых есть зайка.
    """
    hares = 0
    while (area := input().lower()) != "приехали!":
        hares += 1 if "зайка" in area else 0
    print(hares)


def p_2_3_с():
    """
    Давайте поможем ребятам в детском саду выучить числа!
    Они называют два числа — начало и конец последовательности,
    а мы выводим все числа между ними.
    Используйте для этого цикл for.

    Формат ввода Два числа в порядке возрастания, каждое с новой строки.

    Формат вывода Все числа от начала до конца (включительно),
    записанные через пробел.
    """
    for i in range(int(input()), int(input()) + 1):
        print(i, end=" ")


def p_2_3_d():
    """
    Теперь числа могут называться в любом порядке — от меньшего
    к большему или от большего к меньшему.
    Ваша задача — вывести все числа от начала до конца в правильном порядке.

    Формат ввода     Два числа, каждое с новой строки.

    Формат вывода     Все числа от начала до конца (включительно),
    записанные через пробел.
    """
    start, end = int(input()), int(input())
    step = 1 if start < end else -1
    for i in range(start, end + step, step):
        print(i, end=" ")


def p_2_3_e():
    """
    Добавим к циклу while работу с дробными числами?
    В продуктовом магазине объявили акцию:
    скидка 10% на все товары, которые стоят 500 тугриков и больше.
    Вам нужно разработать программу для кассового автомата,
    которая считает итоговую сумму покупки с учётом скидки.

    Формат ввода
    Вводится некоторое количество рациональных чисел - стоимость товаров.
    Список завершается значением 0.

    Формат вывода
    Требуется вывести сумму всех товаров с учетом объявленной акции.
    """
    summ = 0
    while (price := float(input())) != 0:
        summ += price if price < 500 else price * (1 - 0.1)
    print(summ)


def p_2_3_f():
    """
    В одном из местных НИИ очень часто требуется находить
    наибольший общий делитель двух чисел.
    Т.к. вы уже зарекомендовали себя, как одни из лучших "автоматизаторов"
    в округе, руководство НИИ заказало данное ПО именно у вас.

    Формат ввода
    Вводится два натуральных числа, каждое на своей строке.

    Формат вывода
    Требуется вывести одно натуральное число – НОД двух данных чисел.

    Примечание
    Самый распространенный способ поиска НОД – Алгоритм Евклида.
    """
    a, b = int(input()), int(input())
    while b:
        a, b = b, a % b
    print(a)


def p_2_3_g():
    """
    В одном из местных НИИ часто требуется находить
    наименьшее общее кратное (НОК) двух чисел.
    Так как вы уже зарекомендовали себя как лучшие "автоматизаторы",
    руководство доверило вам разработку этой программы.
    Решите эту задачу, используя цикл while.

    Формат ввода
    Вводится два натуральных числа, каждое на своей строке.

    Формат вывода
    Требуется вывести одно натуральное число – НОК двух данных чисел.
    """
    a, b = int(input()), int(input())
    nok = a * b
    while b:
        a, b = b, a % b
    print(nok // a)


def p_2_3_h():
    """
    Формат ввода
    В первой строке записана весьма полезная информация.
    Во второй натуральное число N – количество раз,
    которое ее нужно повторить, чтобы она закрепилась.

    Формат вывода
    N раз повторенная весьма полезная информация
    """
    info, n = input(), int(input())
    for _ in range(n):
        print(info)


def p_2_3_i():
    """
    В одном из местных НИИ регулярно требуется находить факториал числа.
    Поскольку вы уже зарекомендовали себя, как одни из лучших
    "автоматизаторов" в округе, руководство НИИ доверило
    разработку этого ПО именно вам!
    Решите эту задачу, используя цикл for.

    Формат ввода
    Вводится одно неотрицательное число.

    Формат вывода
    Требуется вывести одно натуральное число – факториал заданного числа.
    """
    f = 1
    for i in range(1, int(input()) + 1):
        f *= i
    print(f)


def p_2_3_j():
    """
    Навигация всегда была важна. Нам достался архив маршрутов движения,
    но их так много, что без автоматизации справиться с ними
    просто невозможно. Каждый маршрут представляет собой последовательность
    шагов в одном из четырёх направлений: СЕВЕР, ЮГ, ВОСТОК, ЗАПАД
    Для формализации маршрутов была выбрана географическая система координат
    в которой две оси (СЕВЕР-ЮГ и ВОСТОК-ЗАПАД), а единичный отрезок
    по каждой из них равен одному шагу.

    Напишите программу, которая по заданному маршруту определит,
    в какой именно точке мы очутимся, если изначально находимся в точке (0;0).

    Формат ввода
    Вводятся инструкции маршрута в виде:
    <направление>
    <количество шагов>
    Ввод завершается строкой СТОП

    Формат вывода
    Два целых числа – координаты конечной точки маршрута.
    """
    x, y = (0, 0)
    while (d := input()) != "СТОП":
        n = int(input())
        match d.upper():
            case "СЕВЕР":
                y += n
            case "ЮГ":
                y -= n
            case "ВОСТОК":
                x += n
            case "ЗАПАД":
                x -= n
    print(y, x, sep="\n")


def p_2_3_k():
    """
    Многие люди любят манипуляции с цифрами чисел.
    Одно из самых простых действий – найти сумму цифр числа.
    Напишите программу, которая выполнит эту задачу.
    Она поможет потренироваться в построении базовых алгоритмов с циклом while.

    Формат ввода Вводится одно натуральное число.

    Формат вывода Требуется вывести одно натуральное число
    – сумму цифр исходного.
    """
    print(sum(int(i) for i in input()))


def p_2_3_l():
    """
    Рассмотрим похожую задачу, но теперь обработаем цифры по-другому.
    Мы продолжаем наши эксперименты с числами!
    На этот раз нужно выполнить другое действие — найти максимальную цифру числа.

    Напишите программу для выполнения этого действия.

    Формат ввода Вводится одно натуральное число.

    Формат вывода
    Требуется вывести одно натуральное число – максимальную цифру исходного.
    """
    print(max(int(i) for i in input()))


def p_2_3_m():
    """
    Во многих играх порядок определяется броском кубика или монетки,
    а у нас — лексикографическим сравнением имён.
    Первым ходит тот, чьё имя идёт раньше в алфавитном порядке.
    Определите, кто из игроков начнёт игру, используя цикл for.

    Формат ввода
    В первой строке записано одно натуральное число N – количество игроков.
    В каждой из последующих N строк записано одно имя игрока
    (используются только латинские и кириллические символы).

    Формат вывода
    Имя игрока, который будет ходить первым.
    """
    print(min(input() for i in range(int(input()))))


def p_2_3_n():
    """
    Одним из самых интересных видов чисел в математике являются простые числа.
    Они остаются загадкой для учёных по всему миру и продолжают изучаться.
    Кроме того, простые числа находят применение в вычислительной технике — они
    лежат в основе алгоритмов шифрования данных.
    Напишите программу, которая определяет, является ли число простым.
    Эта задача поможет вам потренироваться в построении базовых
    алгоритмов с циклом for.

    Формат ввода Вводится одно натуральное число.

    Формат вывода Вывести сообщение "YES" если число простое, иначе – "NO".
    """
    num = int(input())
    divs = set(i for i in range(2, num // 2 + 1) if num % i == 0)
    print("NO" if divs or num == 1 else "YES")


def p_2_3_o():
    """
    Долгая поездка в поезде — испытание для родителей. Чтобы дети не скучали,
    они играют в поиск зверушек в придорожной растительности.
    Давайте присоединимся к этой игре и посчитаем,
    в скольких строках встречается зайка!

    Формат ввода В первой строке записано натуральное число
    N – количество выделенных придорожных местностей.
    В каждой из N последующих строка записано описание придорожной местности.

    Формат вывода Количество строк в которых есть зайка.
    """
    print(sum(1 for _ in range(int(input())) if "зайка" in input().lower()))


def p_2_3_p():
    """
    В прошлом параграфе мы уже решали задачу о нахождении палиндрома.
    Давайте вспомним её суть: Палиндром — это число, слово или фраза,
    которые читаются одинаково слева направо и справа налево.
    Напишите программу, которая проверяет, является ли заданное
    число палиндромом. В этот раз будем использовать цикл while.

    Формат ввода Одно натуральное число

    Формат вывода YES если число является палиндромом, иначе NO.
    """
    s = input()
    res = set(False for i in range(len(s) // 2 + 1) if s[i] != s[-(i + 1)])
    print("NO" if res else "YES")


def p_2_3_q():
    """
    Одно из интересных действий, которое можно совершить – очистить
    число от определённых цифр. Напишите программу для очистки числа
    от всех чётных цифр, используя цикл while.

    Формат ввода Одно натуральное число

    Формат вывода Одно натуральное число - результат очистки.
    """
    num = input()
    res = ""
    i = 0
    while i in range(len(num)):
        if int(num[i]) % 2 != 0:
            res += num[i]
        i += 1
    print(res)


def p_2_3_r():
    """
    Математика, "простые числа" и цикл while.
    "Простые числа" не поддаются формализации и до сих пор
    изучаются учеными по всему миру. Они применяются в вычислительной
    техники, как основа для алгоритмов шифрования данных.

    Напишите программу для разложения числа на простые множители.

    Формат ввода Вводится одно натуральное число.

    Формат вывода Требуется составить математическое выражение –
    произведение простых неубывающих чисел, которое в результате дает исходное.
    """
    num = int(input())
    primes = []
    div = 2
    while num > 1:
        while num % div == 0:
            primes.append(div)
            num //= div
        div += 1
    print(*primes, sep=" * ")


def p_2_3_s():
    """
    Многие люди любят играть в различные "Угадайки".
    Давайте сымитируем такую игру между двумя людьми.
    Ваша задача — написать программу, которая угадывает
    загаданное целое число от 1 до 1000 с использованием цикла while.
    Пользователь (или тестирующая система) загадывает число и
    не сообщает его программе.
    Угадать число нужно не более чем за 10 попыток.

    На каждую попытку пользователь отвечает одной из фраз:
    Больше, Меньше, Угадал!
    """
    # Ужасная спецификация! Перевожу на русский:
    # нужно написать не алгоритм игры, в ходы участника, который
    # ОТГАДЫВАЕТ число (ВЫ должны сделать попытку угадать число
    # (ввести его через print), затем считать ответ
    # и его обработать, сделав следующую попытку)
    low, high = 1, 1000
    att = 0
    while att < 10:
        eff = (low + high) // 2
        print(eff)
        match input():
            case "Больше":
                low = eff + 1
            case "Меньше":
                high = eff - 1
            case "Угадал!":
                break
        att += 1


def p_2_3_t():
    """
    Блокчейн (blockchain) переводится как «цепочка блоков». Это способ
    хранения данных, защищённый от подделки, используемый,
    в частности, криптовалютой биткоин.
    Блокчейн действительно представляет собой последовательность блоков.
    Каждый блок представляет собой некоторую полезную информацию (в частности,
    в случае биткоина это список транзакций за определённый период времени —
    кто кому когда сколько денег передал), снабжённую случайным числом и
    некоторыми служебными данными, в том числе хэшем — числом,
    которое по определённой формуле зависит от остальной части блока
    и хэша предыдущего блока.

    Хэш должен быть меньше определённого числа. При этом формула,
    по которой вычисляется хэш, устроена так, что невозможно получить
    достаточно маленький хэш иначе, чем перебирая различные значения
    случайного числа. Поэтому если злоумышленник решит подделать блокчейн
    (и, допустим, вставить в его середину блок с записью о том, что
    все люди передают ему все свои деньги), то ему придётся подобрать новое
    случайное число в новое поддельном блоке и всех последующих
    (ведь хэш каждого следующего блока зависит от хэша предыдущего),
    что потребует невозможно больших вычислительных мощностей.
    Поэтому блокчейн в целом защищён от подобных атак.

    Напишите программу, которая проводит проверку правильности
    хэшей в модельном блокчейне с простой хэш-функцией.
    Блок Bn с номером n включает полезную информацию Mn,
    представленную натуральным числом,
    Rn — случайное число от 0 до 255 и Hn — хеш (целое число от 0 до 255).
    У каждого блока хэш вычисляется по формуле
    Hn = 37 * (Mn + Rn + H(n-1)  (по модулю 256),
    при вычислении хэша начального блока H0 вместо хэша
    предыдущего блока берётся ноль.

    При этом каждый блок представлен одним числом
    Bn = Hn + Rn * 256 + Mn * 256 ** 2
    При этом требуется, чтобы хэш Hn был меньше 100.

    Формат ввода
    На первой строке вводится натуральное число
    N — количество блоков. Далее следуют N чисел
    Bn , каждое на отдельной строке.

    Формат вывода
    Следует вывести номер первого блока, у которого неправильный хэш
    (не меньше 100 или не совпадает с вычисленным по указанной в
    условии формуле), или -1, если все хэши в блокчейне правильные.
    Нумерация блоков идёт с нуля, т. е. они имеют номера от 0 до n-1.
    """
    # 1. Считать список блоков и установить резульатат по умолчанию
    # 2. Задачть значение "предыдущего хэша" 0
    # 3. Для каждого блока:
    #   • Распаковать Mn, Rn, Hn.
    #   • Вычислить Hn = (37 * (Mn + Rn + prev_h)) % 256.
    #   • Проверить: Hn < 100 , Hn совпадает с вычислениями , если все ок,
    #       обновить прерыдущий хэш, если нет – сохранить номер и прекратить обработку
    # 4. Вывести результат
    res, p_h = -1, 0
    count = int(input())
    blocks = [int(input()) for _ in range(count)]
    for i in range(count):
        b = blocks[i]
        h = b % 256
        r = (b // 256) % 256
        m = b // (256**2)
        x = (37 * (m + r + p_h)) % 256

        if h < 100 and h == x:
            p_h = h
        else:
            res = i
            break
    print(res)
