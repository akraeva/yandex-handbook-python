# Yandex / Хендбуки / Основы Python
# 3.4. Встроенные возможности по работе с коллекциями

from itertools import chain, combinations, count, cycle, permutations, product


def p_3_4_a():
    """
    В жизни часто приходится составлять списки:
    продуктов, задач на день, дел.
    Давайте автоматизируем это с помощью Python!
    Напишите программу, которая превращает строку слов
    в нумерованный список — по одному элементу на строку.

    Формат ввода Вводится одна строка.
    Формат вывода Требуется вывести нумерованный список,
    составленный из её слов.
    """
    print(*(f"{i + 1}. {thing}" for i, thing in enumerate(input().split())), sep="\n")


def p_3_4_b():
    """
    Воспитатель в детском саду устал тратить время,
    чтобы построить детей по парам. Он договорился с детьми,
    чтобы те делились на две, по возможности равные, группы.

    Напишите программу, которая по списку двух шеренг составляет пары детей.

    Формат ввода Вводится две строки с именами детей,
    записанными через запятую и пробел.
    Формат вывода Требуется вывести список пар, которые можно составить,
    если последовательно брать из каждой шеренги по одному ребёнку.
    Имена в парах выводить через дефис окружённый пробелами.

    Примечание
    В одной из групп может быть на одного ребенка больше, чем в другой.
    Этот ребёнок при формировании пар не учитывается
    и идёт в паре с воспитателем.
    """
    print(
        *(
            " - ".join(couple)
            for couple in zip(input().split(", "), input().split(", "))
        ),
        sep="\n",
    )


def p_3_4_с():
    """
    Теперь потренируемся использовать бесконечные итераторы.
    Напишите программу, которая выводит последовательность
    чисел по заданным параметрам — началу, концу и шагу.

    Формат ввода В одну строку через пробел вводятся 3
    рациональных числа — начало счета, конец и шаг.
    Формат вывода Последовательность чисел с заданными параметрами.
    """
    # from itertools import count
    start, end, step = map(float, input().split())
    for num in count(start, step):
        if num > end:
            break
        print(round(num, 2))


def p_3_4_d():
    """
    Попробуем применить итератор к строкам, а не к числам.
    Напишите программу, которая превращает строку слов в
    «ёлку» — с каждой строкой список становится длиннее.

    Формат ввода В одну строку через пробел вводятся слова
    разделенные пробелом.
    Формат вывода Несколько строк. В каждой следующей строке
    на одно слово больше.
    """
    text = input().split()
    for i in range(len(text)):
        print(" ".join(text[: i + 1]))


def p_3_4_e():
    """
    Поход в магазин часто вызывает проблемы. Если не подготовить список,
    можно уйти за хлебом, а вернуться с десятком пакетов.
    Напишите программу, которая собирает пожелания семьи (мамы, папы и дочки)
    в единый список и приводит его в порядок.

    Формат ввода В трёх строках записаны желаемые продукты
    (через запятую и пробел).
    Формат вывода Отсортированный по алфавиту список продуктов с нумерацией.
    Примечание Помните, что итераторы можно применять к другим итераторам.
    """

    # from itertools import chain
    wishes = [input().split(", ") for _ in range(3)]
    print(
        *(
            f"{i+1}. {product}"
            for i, product in enumerate(sorted(chain.from_iterable(wishes)))
        ),
        sep="\n",
    )


def p_3_4_f():
    """
    Пора сыграть в карты — но без одной из мастей.
    Сгенерируйте колоду игральных карт (от двойки до туза),
    исключив масть, которую вводит пользователь.

    Формат ввода Название масти, которая должна быть выброшена,
    передаётся в том же падеже, в котором она выводится
    на экран: «пик», «треф», «бубен» и «червей».
    Формат вывода Список карт в колоде по увеличению номинала,
    затем масти (как в преферансе).
    """
    # from itertools import chain, product

    valus = chain(range(2, 11), ["валет", "дама", "король", "туз"])
    suits = ["пик", "треф", "бубен", "червей"]
    suits.remove(input())
    print(*(f"{value} {suit}" for value, suit in product(valus, suits)), sep="\n")


def p_3_4_g():
    """
    Ребята в классе решили устроить чемпионат по шашкам по принципу
    «каждый с каждым». Напишите программу, которая составляет
    список всех возможных игр между учениками.

    Формат ввода В первой строке записано число учеников (N).
    В каждой из последующих  N строк записано одно имя.
    Формат вывода Список игр в формате:
    <Игрок 1> - <Игрок 2>
    Порядок игр не имеет значения.
    """
    # from itertools import combinations
    students = [input() for _ in range(int(input()))]
    print(*(f"{s1} — {s2}" for s1, s2 in combinations(students, r=2)), sep="\n")


def p_3_4_h():
    """
    В детском саду ежедневно подают новую кашу на завтрак.
    Напишите программу, которая строит расписание каш на
    ближайшие дни на основе заданного меню.

    Формат ввода Вводится натуральное число M — количество каш в меню.
    В каждой из последующих M строк записано одно название каши.
    В конце передается натуральное число N — количество дней.
    Формат вывода Вывести список каш в порядке подачи.
    """

    # from itertools import cycle
    porridges = [input() for _ in range(int(input()))]
    days = int(input())
    for i in cycle(porridges):
        if days:
            print(i)
            days -= 1
        else:
            break


def p_3_4_i():
    """
    Местная фабрика канцелярских товаров заказала программу,
    которая генерирует таблицы умножения.
    Давайте поможем производителю.
    Напишите программу, которая выводит таблицу умножения
    размером NxN — построчно, по одному ряду на строку.

    Формат ввода Вводится одно натуральное число — требуемый размер таблицы.
    Формат вывода Таблица умножения заданного размера.
    """
    # from itertools import product

    n = int(input())
    # print(
    #      *(" ".join(str((i + 1) * (j + 1)) for i in range(n)) for j in range(n)),
    #       sep="\n")
    print(
        *(
            f'{i * j}{'\n' if j == n else ' '}'
            for i, j in product(range(1, n + 1), repeat=2)
        ),
        sep="",
    )


def p_3_4_j():
    """
    Аня, Боря и Вова решили съесть апельсин.
    Подскажите ребятам, как им его разделить.
    Разработайте программу, которая выводит все возможные способы
    разделить заданное количество долек апельсина между тремя детьми
    так, чтобы каждому досталось хотя бы по одной, и ничего не осталось.

    Формат ввода В единственной строке записано количество
    долек апельсина (N).
    Формат вывода Таблица вариантов разделения апельсина.

    Примечания
    Каждому ребёнку должна достаться хотя бы одна долька апельсина.
    Ни одной дольки не должно остаться.
    Выводить варианты в порядке увеличения количества долек у Ани,
    следом Бори и затем Вовы.
    """
    # from itertools import product
    n = int(input())
    print("А Б В")
    print(
        *(
            f"{a} {b} {n - a - b}"
            for a, b in product(range(1, n), repeat=2)
            if n - a - b > 0
        ),
        sep="\n",
    )


def p_3_4_k():
    """
    Ребята в детском саду вновь учатся считать, и воспитательница
    решила сделать так, чтобы им было проще освоить новый навык.
    Для этого она хочет оформить список изучаемых чисел особым образом.
    Дети справляются весьма быстро, поэтому ей требуется программа,
    которая способна строить числовые прямоугольники.
    Напишите программу, которая строит числовой прямоугольник заданного
    размера, заполняя его числами по строкам.
    Все столбцы должны быть одинаковой ширины — так прямоугольник
    будет выглядеть аккуратно.

    Формат ввода В первой строке записано число N — высота
    числового прямоугольника. Во второй строке указано число
    M — ширина числового прямоугольника.
    Формат вывода Нужно вывести сформированный числовой прямоугольник
    требуемого размера. Чтобы прямоугольник был красивым, каждый его
    столбец должен быть одинаковой ширины.
    """
    # from itertools import product
    n, m = int(input()), int(input())
    size = len(str(n * m))
    print(
        *(
            f'{i * m + j:>{size}}{" " if j < m else "\n"}'
            for i, j in product(range(n), range(1, m + 1))
        ),
        sep="",
    )


def p_3_4_l():
    """
    Давайте вновь поможем человеку с покупками.
    Разработайте программу, которая объединяет пожелания
    семьи в один аккуратный список продуктов.
    Соберите все элементы в общий список, отсортируйте
    его по алфавиту и пронумеруйте.

    Формат ввода В первой строке задано натуральное число
    N — количество членов семьи. В следующих N строках записаны
    желаемые продукты (через запятую и пробел).
    Формат вывода Отсортированный по алфавиту список продуктов с нумерацией.
    """
    # from itertools import chain
    wishes = sorted(
        chain.from_iterable(input().split(", ") for _ in range(int(input())))
    )
    print(*(f"{i}. {w}" for i, w in zip(range(1, len(wishes) + 1), wishes)), sep="\n")


def p_3_4_m():
    """
    Расстановка спортсменов на старте — дело несложное, если знать,
    как подойти к задаче. Напишите программу, которая выводит все
    возможные расстановки участников, учитывая их имена.

    Формат ввода В первой строке задано натуральное число
    N — количество спортсменов. В следующих N строках записаны
    имена спортсменов.
    Формат вывода Отсортированный по алфавиту список расстановок.
    Имена в каждой строке выводить через запятую и пробел.
    """
    # from itertools import permutations
    print(
        *sorted(
            ", ".join(athletes)
            for athletes in permutations([input() for _ in range(int(input()))])
        ),
        sep="\n",
    )


def p_3_4_n():
    """
    Хорошо, спортсмены расставлены на старте. Вот только угадать
    финалистов практически невозможно. Давайте напишем программу,
    которая выводит список возможных победителей — всех, кто может
    оказаться в числе призёров при любом раскладе.

    Формат ввода В первой строке задано натуральное число
    N — количество спортсменов. В следующих N строках записаны
    имена спортсменов.
    Формат вывода Отсортированный по алфавиту список вариантов.
    Имена в каждой строке выводить через запятую и пробел.
    """
    # from itertools import permutations
    print(
        *sorted(
            ", ".join(athletes)
            for athletes in permutations([input() for _ in range(int(input()))], r=3)
        ),
        sep="\n",
    )


def p_3_4_o():
    """
    В этот раз семья договорилась, что в целях экономии
    они будут совершать в день только три покупки.
    Напишите программу, которая готовит все возможные
    варианты списков таких покупок.

    Формат ввода В первой строке задано натуральное число
    N — количество членов семьи. В следующих N строках записаны
    желаемые продукты (через запятую и пробел).
    Формат вывода Варианты списков покупок в алфавитном порядке.
    """
    # from itertools import chain, permutations
    wishes = chain.from_iterable([input().split(", ") for _ in range(int(input()))])
    print(
        *sorted(" ".join(w) for w in permutations(wishes, r=3)),
        sep="\n",
    )


def p_3_4_p():
    """
    Виталий любит играть в карты. Он решил выяснить, какие есть
    вариации вытащить из колоды определённые тройки карт.
    Напишите программу, которая выводит список подходящих троек
    в лексикографическом порядке с учётом заданных условий.

    Формат ввода В первой строке записана масть, которая
    должна присутствовать в тройке. Во второй строке записан
    достоинство, которого не должно быть в тройке.

    Формат вывода Выведите на экран первые 10 получившихся троек.
    Карты в каждой комбинации должны быть отсортированы лексикографически
    (по строке названия карты). Карты комбинации выводятся через
    запятую с пробелом после неё. Комбинации между собой также должны быть
    отсортированы в лексикографическом порядке по строке,
    представляющей комбинацию целиком.

    Примечание Обратите внимание: валет-дама-король-туз лексикографически
    упорядочены. Но «10 ...» лексикографически младше, чем «2 ...»,
    а бубны младше, чем пики.

    Масти в именительном и родительном падежах:
    буби	бубен
    пики	пик
    трефы	треф
    черви	червей
    """

    # from itertools import chain, combinations, product

    suits = {"буби": "бубен", "пики": "пик", "трефы": "треф", "черви": "червей"}
    suit = suits[input()]

    values = sorted(map(str, range(2, 11))) + ["валет", "дама", "король", "туз"]
    values.remove(input())
    combos = (
        combo
        for combo in combinations(product(values, suits.values()), 3)
        if suit in list(chain.from_iterable(combo))
    )
    counter = 0
    for combo in combos:
        counter += 1
        print(*(" ".join(card) for card in combo), sep=", ")
        if counter == 10:
            break


def p_3_4_q():
    """
    Давайте вновь поможем Виталию — теперь его интересует,
    какой вариант расклада идёт сразу после уже полученного.
    Напишите программу, которая находит следующий подходящий
    вариант тройки карт, соответствующий условиям.

    Формат ввода В первой строке записана масть, которая
    должна присутствовать в тройке.
    Во второй строке записан достоинство, которого не должно быть в тройке.
    В третьей строке записан предыдущий вариант полученный Виталием.
    Формат вывода Выведите следующий вариант расклада.

    Примечание Обратите внимание: валет-дама-король-туз лексикографически
    упорядочены. Но «10 ...» лексикографически младше, чем «2 ...»,
    а бубны младше, чем пики.
    """
    # from itertools import chain, combinations, product

    suits = {"буби": "бубен", "пики": "пик", "трефы": "треф", "черви": "червей"}
    suit = suits[input()]
    values = sorted(map(str, range(2, 11))) + ["валет", "дама", "король", "туз"]
    values.remove(input())
    combos = [
        ", ".join(" ".join(card) for card in combo)
        for combo in combinations(product(values, suits.values()), 3)
        if suit in list(chain.from_iterable(combo))
    ]
    print(combos[combos.index(input()) + 1])


def p_3_4_r():
    """
    Вся современная электронно-вычислительная техника строится
    на Булевой алгебре, которая оперирует истинностью и
    ложностью высказываний (в Python это and, or, not).
    Разработайте программу, которая для введённого логического
    выражения от переменных a, b, c строит таблицу истинности —
    то есть перебирает все возможные комбинации значений
    и вычисляет результат.

    Формат ввода Вводится логическое выражение от трех переменных
    (a, b, c) валидное для языка Python.
    Формат вывода Выведите таблицу истинности данного выражения.
    """
    # from itertools import product
    f = input()
    print("a b c f")
    for a, b, c in product((0, 1), repeat=3):
        print(a, b, c, int(eval(f)))


def p_3_4_s():
    """
    Продолжим работу с таблицами истинности.
    Теперь выражения могут содержать переменное количество переменных,
    обозначенных заглавными латинскими буквами.
    Напишите программу, которая строит таблицу истинности для
    заданного логического выражения.

    Формат ввода Вводится логическое выражение от нескольких переменных
    валидное для языка Python. Все переменные заданы заглавными
    латинскими буквами.
    Формат вывода Выведите таблицу истинности данного выражения.
    """
    # from itertools import product
    f = input()
    args = sorted(set(ch for ch in f if ch.isupper()))
    print(*args, "F")
    for values in product((0, 1), repeat=len(args)):
        v = dict(zip(args, values))
        print(*values, int(eval(f, {}, v)))


def p_3_4_t():
    """
    На этот раз придётся справиться с выражением, в котором
    встречаются нестандартные логические операции: импликация,
    строгая дизъюнкция и эквивалентность.
    Они не поддерживаются в Python напрямую, но вы сможете
    реализовать их самостоятельно.

    Напишите программу, которая для заданного логического выражения
    строит таблицу истинности, включая поддержку следующих операций:

    -> — импликация
    ^ — строгая дизъюнкция
    ~ — эквивалентность
    Формат ввода
    Вводится логическое выражение от нескольких переменных.

    Возможное содержание выражения:

    Заглавная латинская буква — переменная;
    not — отрицание;
    and — конъюнкция;
    or — дизъюнкция;
    ^ — строгая дизъюнкция;
    -> — импликация;
    ~ — эквивалентность;
    () — логические скобки.
    Формат вывода
    Выведите таблицу истинности данного выражения.
    """
    # не смогла решить задачу, ни через ОПН, ни другим способом
    # решение, предложенные Chat-GPT заняло 100 строк
