# Yandex / Хендбуки / Основы Python
# 3.3. Списочные выражения. Модель памяти для типов языка Python


def p_3_3_a(a, b):
    """
    Это первая задача в блоке, и она поможет освоиться с базовой
    конструкцией списочных выражений в Python. Такие выражения
    позволяют лаконично и эффективно создавать списки
    по заданному правилу.

    Вашему решению будут даны две переменные a и b.
    Напишите одно списочное выражение, которое формирует
    список квадратов всех целых чисел от [a,b] включительно.

    Примечание В решении не должно быть ничего, кроме списочного выражения.
    """
    [x**2 for x in range(a, b + 1)]


def p_3_3_b(a, b):
    """
    В этой задаче мы продолжаем работать со списочными выражениями,
    но теперь усложним логику: список квадратов должен строиться
    вне зависимости от порядка значений a и b.

    Если a < b, счёт идёт вперёд. Если a > b, счёт идёт назад.
    Результат — один список, содержащий квадраты всех чисел от a до b
    включительно, в соответствующем порядке.

    Вашему решению даны переменные a и b. Сформируйте список квадратов
    всех целых чисел от a до b включительно — в прямом или обратном порядке,
    в зависимости от того, какое значение больше.

    Примечание В решении не должно быть ничего, кроме списочного выражения.
    """
    [x**2 for x in range(a, b + (1 if a < b else -1), 1 if a < b else -1)]


def p_3_3_с(a, b, d):
    """
    Переходим от построения списков к фильтрации значений.
    Теперь ваша цель — выбрать из диапазона только те числа,
    которые делятся на заданное значение без остатка.

    Вашему решению даны три переменные: a, b и d.
    Сформируйте список всех чисел, кратных d,
    лежащих в диапазоне от a до b включительно.

    С помощью одного списочного выражения постройте список
    всех чисел от a до b, которые делятся на d без остатка.

    Примечание В решении не должно быть ничего, кроме списочного выражения.
    """
    [x for x in range(a, b + 1) if x % d == 0]


def p_3_3_d(numbers):
    """
    Продолжаем практиковаться с генераторами множеств
    и фильтрацией данных.

    Вашему решению предоставлен список numbers,
    содержащий натуральные числа.
    Нужно выбрать из него только нечётные числа —
    и сохранить их в множестве, чтобы исключить повторы.

    Сформируйте одно выражение, которое создаёт множество
    сех нечётных чисел из списка numbers.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    set(num for num in numbers if num % 2 != 0)


def p_3_3_e(numbers):
    """
    Эта — пятая в серии, и теперь вы потренируетесь вычислять
    и фильтровать значения по условию, используя генераторы множеств.

    Полный квадрат — это натуральное число, являющееся квадратом
    другого натурального числа. Например: 4 — это 2 ** 2, 49 — это 7 ** 2.
    Ваша задача — из заданного списка numbers отобрать только
    полные квадраты и собрать их в множество (без повторов).

    Вашему решению будет предоставлен список numbers, содержащий
    натуральные числа. Сформируйте одно выражение, которое создаёт
    множество всех полных квадратов из списка.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    set(num for num in numbers if num**0.5 % 1 == 0)


def p_3_3_f(sentence):
    """
    Позади уже пять задач — отличная работа!
    Теперь переходим к следующему шагу: учимся извлекать
    информацию из строк.

    В этой задаче нужно посчитать длину каждого слова в строке.

    Вашему решению будет предоставлена строка sentence,
    в которой слова разделены пробелами.
    Напишите списочное выражение, которое создаёт список длин этих слов.

    Примечание В решении не должно быть ничего, кроме списочного выражения.
    """
    [len(word) for word in sentence.split()]


def p_3_3_g(text):
    """
    Продолжаем тренироваться в списочных выражениях.

    На этот раз вам предстоит найти все цифры в строке.
    Вашему решению будет предоставлена переменная text — строка,
    которая может содержать любые символы.
    Нужно извлечь все цифры и собрать их в одну строку,
    сохранив порядок появления.

    Примечание В решении не должно быть ничего, кроме списочного выражения.
    """
    "".join([ch for ch in text if ch.isdigit()])


def p_3_3_h(string):
    """
    На этот раз нужно сократить длинную фразу до аббревиатуры,
    как делают в названиях компаний, университетов или государств.

    Вам дана строка string, содержащая слова, разделённые пробелами.
    Нужно составить строку из первых букв всех слов,
    в верхнем регистре, без пробелов.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    "".join(word[0].upper() for word in string.split())


def p_3_3_i(numbers):
    """
    Вы уже уверенно фильтруете, преобразуете и собираете данные —
    теперь пора объединить эти навыки в одну задачу.

    Допустим, у вас есть список натуральных чисел, возможно с повторениями.

    Ваша задача — превратить его в строку, в которой будут только
    уникальные числа, отсортированные по возрастанию,
    разделённые через дефис с пробелами (' - ').

    Вашему решению предоставлен список натуральных чисел numbers.
    Сформируйте строку по описанным правилам.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    " - ".join(str(num) for num in sorted(set(numbers)))


def p_3_3_j(words):
    """
    Иногда при анализе текста важно уметь выделять слова с
    определёнными характеристиками — например, по количеству гласных.
    В этой задаче мы потренируемся именно в такой фильтрации:
    вы будете искать слова, в которых не менее трёх гласных,
    независимо от языка или регистра.

    Вашему решению предоставлена строка words.
    Напишите выражение, которое создаёт список слов, в которых
    не менее трёх гласных букв (в любом регистре).

    Примечание В решении не должно быть ничего, кроме выражения.

    В русском языке гласными являются: аяуюоёэеиы
    В английском: aeiouy
    """
    [
        word
        for word in words.split()
        if len([1 for ch in word if ch.lower() in "аяуюоёэеиыaeiouy"]) > 2
    ]


def p_3_3_k(numbers):
    """
    Когда вы работаете с данными, важно уметь выделять уникальные
    значения — те, что появляются ровно один раз.

    Вашему решению предоставлен список numbers.
    Напишите выражение, которое создаёт множество всех чисел,
    встречающихся в списке ровно один раз.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    set(num for num in numbers if numbers.count(num) == 1)


def p_3_3_l(numbers):
    """
    Вашему решению предоставлено множество numbers.
    Напишите одно выражение, которое находит максимальное
    произведение двух различных чисел из этого множества.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    max(max(i * j for j in numbers if j != i) for i in numbers)


def p_3_3_m(data):
    """
    Вашему решению предоставлен словарь data, в котором
    ключами являются слова, а значениями списки чисел.

    Напишите одно выражение, которое находит ключ с
    наименьшей суммой значений. Если таких несколько —
    выберите лексикографически наименьший
    (т.е. тот, что раньше по алфавиту).

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    min(
        key for key, value in data.items() if sum(value) == min(map(sum, data.values()))
    )


def p_3_3_n(data):
    """
    Иногда в данных встречаются ошибки — например,
    повторы там, где их быть не должно.
    Научимся быстро находить такие случаи при помощи
    словарей и выражений.

    Вашему решению предоставлен словарь data, в котором
    ключами являются слова, а значениями списки чисел.
    Напишите выражение для создания множества ключей,
    среди значений которых есть повторы.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    set(key for key, values in data.items() if len(values) != len(set(values)))


def p_3_3_o(text):
    """
    В этой задаче вы потренируетесь извлекать статистику
    из текстовых данных. А именно — подсчитывать частоту
    употребления каждой буквы в строке.
    Это навык, который пригодится во многих прикладных задачах,
    от анализа документов до построения индексов поиска.

    Вашему решению будет предоставлена строка text.
    Напишите выражение для генерации словаря, который содержит
    информацию о частоте употребления букв в заданной строке.
    При анализе не учитывайте регистр, а ключами словаря
    сделайте использованные в строке буквы в нижнем регистре.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    {ch: text.lower().count(ch) for ch in text.lower() if ch.isalpha()}


def p_3_3_p(rle):
    """
    Формат RLE (Run-Length Encoding) — это способ сжатия данных,
    при котором последовательности одинаковых символов заменяются
    на пару: символ + количество повторений. В этой задаче вам
    нужно сделать обратное преобразование: по списку пар символов
    и количества их повторений восстановить исходную строку.

    Вашему решению будет предоставлен список кортежей rle с символами
    и количеством их повторений. Напишите выражение для генерации
    строки, из которой был получен данный список.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    "".join(ch * count for row in rle for ch, count in [row])


def p_3_3_q(n):
    """
    На этом этапе мы потренируемся в вложенных списочных
    выражениях и сгенерируем настоящую таблицу умножения.

    Вашему решению будет предоставлена единственная переменная
    n — необходимый размер таблицы. Постройте список из n списков,
    каждый из которых содержит произведения чисел от 1 до n на
    текущее значение строки.

    Примечание В решении не должно быть ничего, кроме списочного выражения.
    """
    [[i * j for j in range(1, n + 1)] for i in range(1, n + 1)]


def p_3_3_r(numbers):
    """
    В этой задаче мы потренируем вложенные списочные выражения и
    создание словаря с вычисляемыми значениями.
    Нужно будет для каждого числа найти список всех его делителей —
    от 1 до самого числа.

    Вашему решению будет предоставлено множество numbers.
    Напишите выражение для генерации словаря содержащего информацию
    о делителях каждого из заданных чисел.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    {num: [div for div in range(1, num + 1) if num % div == 0] for num in numbers}


def p_3_3_s(numbers):
    """
    А сейчас — проверим, умеете ли вы находить простые
    числа с помощью выражений на Python.
    В этой задаче предстоит применить вложенное выражение
    с условием, чтобы отфильтровать все простые числа из множества.

    Вашему решению будет предоставлено множество numbers.
    Продумайте выражение для генерации множества содержащего
    все простые числа из заданных.

    Примечание В решении не должно быть ничего, кроме выражения.
    """
    set(
        num
        for num in numbers
        if num != 1
        and (num < 4 or not [div for div in range(2, num) if num % div == 0])
    )


def p_3_3_t(text):
    """
    Теперь вы объедините всё,что узнали о множествах, списочных
    выражениях и фильтрации данных.
    В этом задании вы проанализируете текст и определите пары слов,
    которые имеют не менее трёх общих букв.
    Важно: порядок слов в паре не имеет значения, а повторяющиеся
    буквы не считаются несколько раз.

    Вашему решению будет предоставлена переменная text.
    Напишите выражение для генерации множества, содержащего все кортежи
    пар слов, имеющих более двух общих букв без учёта повторений.
    Пары с разным порядком слов следует считать одной и той же и включать
    в результат только в одном (лексикографически упорядоченном) виде.

    Примечание В решении не должно быть ничего, кроме выражения.
    Все слова в тексте различны.
    """
    set(
        tuple(sorted((word1, word2)))
        for word1 in text.split()
        for word2 in text.split()
        if word1 != word2 and len([ch for ch in set(word1) if ch in set(word2)]) > 2
    )
