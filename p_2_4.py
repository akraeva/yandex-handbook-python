# Yandex / Хендбуки / Основы Python
# 2.4. Вложенные циклы


def p_2_4_a():
    """
    Местная фабрика канцелярских товаров заказала у вас программу,
    которая генерирует таблицы умножения.
    Давайте поддержим локального производителя!
    Напишите программу, которая по введённому числу n выводит
    таблицу умножения размера n x n.

    Формат ввода Вводится одно натуральное число — требуемый размер таблицы.

    Формат вывода Таблица умножения заданного размера.
    """
    n = int(input())
    for i in range(1, n + 1):
        print(*(i * j for j in range(1, n + 1)))


def p_2_4_b():
    """
    Фабрика снова с нами! Они остались в восторге от вашей таблицы,
    но теперь просят немного другой формат.
    Им нужна таблица умножения в виде списка выражений,
    а не прямоугольной сетки.
    Продолжим поддерживать местный бизнес, используя вложенные циклы.
    Напишите программу, которая по введённому числу n выводит
    все произведения чисел от 1 до n в виде отдельных выражений.
    Порядок важен: сначала фиксируем второе число (внешний цикл),
    а внутри — перебираем первое.

    Формат ввода
    Вводится одно натуральное число — требуемый размер «не таблицы».

    Формат вывода Не таблица умножения заданного размера.
    """
    n = int(input())
    for i in range(1, n + 1):
        print(*(f"{j} * {i} = {i * j}" for j in range(1, n + 1)), sep="\n")


def p_2_4_с():
    """
    Великий математик Виталий Евгеньевич каждый Новый год проводит...
    на работе. Коллеги всегда любили и ценили его, поэтому в этом году
    решили сделать ему сюрприз — украсить кабинет учёного
    математическими ёлками. Конечно, без вашей помощи тут не обойтись.
    Нужно написать программу, которая создаст новогоднюю ёлку из чисел.
    Уверены, Виталий Евгеньевич будет рад!

    Напишите программу, которая по введённому числу n строит
    «математическую ёлку» — пирамидку из чисел.
    В первой строке одно число, во второй — два, в третьей — три...
    и так далее, пока не закончатся числа.

    Формат ввода
    Вводится одно натуральное число — количество чисел в математической ёлке.

    Формат вывода Требуемая новогодняя ёлка.
    """
    n = int(input())
    num, row = 1, 1

    while num <= n:
        for _ in range(row):
            if num > n:
                break
            print(num, end=" ")
            num += 1
        print()
        row += 1


def p_2_4_d():
    """
    Считать сумму цифр одного числа — не проблема.
    А вот если таких чисел несколько, причём каждое
    может быть многозначным, — тут уже интересно!
    К вам снова пришли за помощью: нужна программа, которая
    посчитает сумму всех цифр всех чисел, поданных на вход.
    Вы справитесь — у вас ведь уже есть всё необходимое:
    циклы и уверенность в своих силах!

    Формат ввода В первой строке указано число N
    Во всех последующих N строках написано по одному числу.

    Формат вывода
    Требуется вывести общую сумму цифр всех введённых чисел (кроме N).
    """
    n = int(input())
    digit_sum = 0
    for _ in range(n):
        for d in input():
            digit_sum += int(d)
    print(digit_sum)


def p_2_4_e():
    """
    В этой задаче вас снова ждёт помощь в семейной поездке.
    В долгой дороге дети начали скучать, и родители развлекают
    их игрой «Кто первым увидит зверушку за окном».
    Ваша задача — написать программу, которая помогает считать
    местности, где была замечена зайка.

    Формат ввода
    В первой строке указано натуральное число N — количество выделенных
    придорожных местностей. В последующих строках записаны слова
    характеризующие выделенную местность.
    Информация о каждой местности завершается словом «ВСЁ».

    Формат вывода
    Количество местностей, в которых есть зайка.
    """
    n = int(input())
    hadigit_sum = 0
    for _ in range(n):
        hare = False
        while (area := input()) != "ВСЁ":
            if area.lower() == "зайка":
                hare = True
        if hare:
            hadigit_sum += 1
    print(hadigit_sum)


def p_2_4_f():
    """
    Недавно к вам обратились из местного НИИ: им часто нужно находить
    наибольший общий делитель (НОД) нескольких чисел.
    Они знают, что вы с этим справитесь!

    Формат ввода В первой строке записано одно число
    N — количество данных. В каждой из последующих
    N строк записано по одному натуральному числу.

    Формат вывода
    Требуется вывести одно натуральное число —
    НОД всех данных чисел (кроме N).

    Примечание
    Самый распространённый способ поиска НОД — Алгоритм Эвклида.
    """
    n = int(input())
    a = int(input())
    for _ in range(n - 1):
        b = int(input())
        while b:
            a, b = b, a % b
    print(a)


def p_2_4_g():
    """
    На велогонках важно всё автоматизировать: особенно старт.
    По правилам квалификации каждый гонщик стартует с задержкой
    на секунду больше, чем предыдущий.
    Первый гонщик стартует после отсчёта: 3, 2, 1... старт!
    Второй — 4, 3, 2, 1... старт!
    И так далее.
    Пора подключать вложенные циклы!

    Формат ввода
    Вводится одно натуральное число — количество участников велогонки.

    Формат вывода Требуется вывести отсчёт.
    """
    n = int(input())
    for rider in range(1, n + 1):
        for counter in range(2 + rider, 0, -1):
            print(f"До старта {counter} секунд(ы)")
        print(f"Старт {rider}!!!")


def p_2_4_h():
    """
    А теперь — в детский сад!
    Там ребята придумали новую игру: каждый называет какое-нибудь число,
    а тот, чьё число имеет наибольшую сумму цифр, выигрывает.
    Судьёй выбрали бедную воспитательницу, и она попросила вас о помощи...
    ну как тут откажешь?

    Формат ввода В первой строке записано число N — количество детей в группе.
    Далее вводятся имя ребенка и его число (каждое на своей строке).

    Формат вывода
    Требуется вывести имя победителя.
    Если два ребенка назвали числа с одинаковой суммой цифр,
    победителем должен быть признан тот, кто ходил позже.
    """
    n = int(input())
    winner = ""
    num = 0
    for _ in range(n):
        name = input()
        digits_sum = 0
        for i in input():
            digits_sum += int(i)
        if digits_sum >= num:
            winner, num = name, digits_sum
    print(winner)


def p_2_4_i():
    """
    Дети в детском саду снова придумали игру: каждый называет число,
    составленное из тех цифр, которые он знает.
    А потом они собирают общее число, выбирая из каждого
    названого числа самую большую цифру.

    Формат ввода
    В первой строке указано число N — количество детей в группе.
    В каждой из последующих N строк записано число.

    Формат вывода Одно большое число.
    """
    print("".join(str(max(map(int, input()))) for _ in range(int(input()))))


def p_2_4_j():
    """
    Аня, Боря и Вова решили съесть апельсин. Но просто так — неинтересно!
    Они хотят узнать все возможные способы, как можно его разделить
    между собой по справедливости.

    Примечание
    Каждому ребёнку должна достаться хотя бы одна долька апельсина.
    Ни одной дольки не должно остаться.
    Выводить варианты в порядке увеличения количества долек у Ани,
    затем Бори и затем уже Вовы.
    Формат ввода
    В единственной строке записано количество доступных долек апельсина.

    Формат вывода
    Таблица вариантов распределения долек апельсина.
    """
    n = int(input())
    print("А Б В")
    for a in range(1, n - 1):
        for b in range(1, n - a):
            print(a, b, n - a - b)


def p_2_4_k():
    """
    А теперь — немного математической классики.
    Простые числа — это такие, у которых только два делителя: 1 и само число.
    В этой задаче вам нужно определить,
    сколько простых чисел назвали участники.

    Формат ввода В первой строке записано число N.
    Во всех последующих N строках — по одному числу.

    Формат вывода
    Требуется вывести общее количество простых чисел среди введённых (кроме N).
    """
    counter = 0
    for _ in range(int(input())):
        num = int(input())
        simple = True
        div = 1
        while num > 3 and simple and div <= num**0.5:
            div += 1
            if num % div == 0:
                simple = False
        if simple and num != 1:
            counter += 1
    print(counter)


def p_2_4_l():
    """
    В детском саду ребята учатся считать, а чтобы это было веселее,
    воспитательница решила показывать числа в виде
    аккуратного числового прямоугольника.
    Дети учатся быстро, и теперь ей нужна программа,
    которая будет строить такие прямоугольники автоматически.

    Напишите программу, которая строит прямоугольник из чисел от 1 до N x M
    и форматирует их так, чтобы все столбцы были одинаковой ширины.

    Формат ввода В первой строке записано число
    N — высота числового прямоугольника.
    Во второй строке указано число M — ширина числового прямоугольника.

    Формат вывода
    Нужно вывести сформированный числовой прямоугольник требуемого размера.
    Чтобы прямоугольник был красивым,
    каждый его столбец должен быть одинаковой ширины.
    """
    n, m = int(input()), int(input())
    size = len(str(n * m))
    for i in range(n):
        print(*(f"{i * m + j + 1:>{size}}" for j in range(m)))


def p_2_4_m():
    """
    Давайте ещё немного поможем воспитательнице — н
    а этот раз с новым вариантом числового прямоугольника.
    На первый взгляд он похож на предыдущий…
    Но здесь числа идут по столбцам, а не по строкам. И это меняет всё!
    Напишите программу, которая заполняет прямоугольник числами
     от 1 до N x M, по столбцам, а не по строкам и форматирует их так,
    чтобы все столбцы были одинаковой ширины.

    Формат ввода В первой строке записано число
    N — высота числового прямоугольника.
    Во второй строке указано число M — ширина числового прямоугольника.

    Формат вывода
    Нужно вывести сформированный числовой прямоугольник требуемого размера.
    Чтобы прямоугольник был красивым, каждый его столбец
    должен обладать одинаковой шириной.
    """
    n, m = int(input()), int(input())
    size = len(str(n * m))
    for i in range(n):
        print(*(f"{j * n + i + 1:>{size}}" for j in range(m)), sep=" ")


def p_2_4_n():
    """
    Обычные прямоугольники — это, конечно, хорошо… н
    о дети быстро теряют к ним интерес.
    Поэтому воспитательница просит вас придумать что-нибудь поинтереснее.
    Например — числовую змейку!
    В этой змейке строки чередуются: одна идёт слева направо,
    следующая — справа налево, потом снова слева направо… и так далее.
    Настоящее приключение для тех, кто учит числа!
    Напишите программу, которая строит числовую змейку из чисел от 1 до N x M.

    Формат ввода
    В первой строке записано число N — высота числового прямоугольника.
    Во второй строке указано число M — ширина числового прямоугольника.

    Формат вывода
    Нужно вывести сформированную числовую змейку требуемого размера.
    Чтобы прямоугольник был красивым, каждый его столбец
    следует сделать одинаковой ширины.
    """
    n, m = int(input()), int(input())
    size = len(str(n * m))
    for i in range(n):
        print(
            " ".join(
                [f"{i * m + j + 1:>{size}}" for j in range(m)][
                    :: (1 if i % 2 == 0 else -1)
                ]
            )
        )


def p_2_4_o():
    """
    Воспитательница снова обратилась к вам: дети так полюбили
    числовые змейки, что теперь просят новую, вертикальную!
    Если раньше змейка «ползала» по строкам, теперь она будет
    двигаться по столбцам — вверх и вниз, вверх и вниз...
    Напишите программу, которая строит вертикальную
    числовую змейку от 1 до N x M.

    Формат ввода В первой строке записано число
    N — высота числового прямоугольника.
    Во второй строке указано число M — ширина числового прямоугольника.

    Формат вывода
    Нужно вывести сформированную числовую змейку требуемого размера.
    Чтобы прямоугольник был красивым, каждый его столбец следует
    сделать одинаковой ширины.
    """
    n, m = int(input()), int(input())
    size = len(str(n * m))
    for i in range(n):
        print(
            *(
                f"{(j * n + i + 1 if j % 2 == 0
                    else j * n + (n - i - 1) + 1):>{size}}"
                for j in range(m)
            )
        )


def p_2_4_p():
    """
    А теперь — немного эстетики. Да, таблица умножения работает, но...
    выглядит-то она скучно. Пора навести порядок и добавить стиля!
    Ваш новый заказчик просит:
    одинаковую ширину столбцов,
    выравнивание по центру,
    и — внимание! — рамки между ячейками.

    Формат ввода
    В первой строке записан требуемый размер таблицы.
    о второй строке — ширина столбцов.

    Формат вывода Таблица умножения заданного размера и вида.
    """
    n, size = int(input()), int(input())
    sep = "\n" + "-" * (size * n + n - 1)
    for i in range(n):
        print(
            "|".join(f"{(i + 1) * (j + 1):^{size}}" for j in range(n)),
            sep if i < n - 1 else "",
        )


def p_2_4_q():
    """
    Палиндром — это число (или слово), которое читается одинаково
    в обе стороны. Например: 121, 454, 7. А вот 123 — уже не палиндром.
    В этой задаче вам нужно определить, сколько палиндромов встретилось
    в списке чисел, названных детьми.

    Формат ввода В первой строке записано число N Во всех последующих
    N строках указано по одному числу.

    Формат вывода
    Требуется вывести общее количество палиндромов
    среди введённых чисел (кроме числа N).
    """
    digit_sum = 0
    for i in range(int(input())):
        digit_sum += 1 if (num := input()) == num[::-1] else 0
    print(digit_sum)


def p_2_4_r():
    """
    Праздники приближаются, и коллеги великого математика снова хотят
    его порадовать. На этот раз — с помощью ещё более красивых
    математических ёлок!
    Вас снова зовут в качестве главного креативного программиста.
    Нужно сделать так, чтобы каждая строка ёлки была аккуратно выровнена
    по центру — строго, симметрично, празднично.

    Формат ввода
    Вводится одно натуральное число — количество чисел в математической ёлке.

    Формат вывода Требуемая новогодня ёлка.

    Примечание Гарантируется, что последняя строка будет самой длинной.
    Не забывайте про существование f-строк.
    """

    def my_solution():
        # мое решение, которое проходит 6/7 тестов, но не ломается после 100
        n = int(input())
        num = 1
        ny_tree = [str(num)]
        while num < n:
            row = ""
            while len(row) <= len(ny_tree[-1]) + 1:
                num += 1
                row += (" " if len(row) > 0 else "") + str(num)
            ny_tree.append(row)

        for row in ny_tree:
            print(f"{row:^{len(ny_tree[-1])}}")

    def gpt_solution():
        # решение, которое написано в соавторстве с ChatGPT
        # при тестировании у меня выдает ерунду, но проходит все тесты
        n = int(input())
        num = 1
        tree = []
        row_len = 1

        while num <= n:
            row = []
            for _ in range(row_len):
                if num > n:
                    break
                row.append(str(num))
                num += 1
            tree.append(" ".join(row))
            row_len += 1

        for row in tree:
            print(f"{row:^{len(tree[-1])}}")

    def author_solution():
        # решение, которое предлагают авторы
        # при тестировании у меня тоже выглядит странно
        # так еще и не соответствует тестовым данным задания...
        max_number = int(input())
        row = 1
        col = 1
        number = 1
        row_value = ""
        while number <= max_number:
            row_value = ""
            while col <= row and number <= max_number:
                row_value += str(number) + (
                    " " if col < row and number < max_number else ""
                )
                col += 1
                number += 1
            row += 1
            col = 1
        width = len(row_value)

        row = 1
        col = 1
        number = 1
        row_value = ""
        while number <= max_number:
            row_value = ""
            while col <= row and number <= max_number:
                row_value += str(number) + (
                    " " if col < row and number < max_number else ""
                )
                col += 1
                number += 1
            print(f"{row_value:^{width}}")
            row += 1
            col = 1


def p_2_4_s():
    """
    Ох, дети растут быстро и становятся всё требовательнее —
    даже змейки им теперь кажутся скучными!
    Воспитательница в панике, но вы уже здесь —
    и готовы придумать что-то новенькое.

    На этот раз им хочется увидеть числовой квадрат,
    который будто состоит из слоёв — как матрёшка из чисел.
    Выглядит эффектно, а строится... проще, чем кажется!

    Формат ввода В первой строке записано число
    N — высота и ширина числового квадрата.

    Формат вывода
    Требуется вывести сформированный числовой квадрат требуемого размера.
    Чтобы квадрат был красивым, каждый его столбец — одинаковой ширины.
    """
    # Проходило 11 тестов из 12, пока в size не добавила +1
    # тестируя сама так и не нашла, где эта проблема выстреливает
    n = int(input())
    size = len(str(n // 2 + 1))
    for i in range(n):
        print(*(f"{1 + min(i, j, n - 1 - i, n - 1 - j):>{size}}" for j in range(n)))


def p_2_4_t():
    """
    На этот раз — настоящая задача для мыслителя.
    Виталий Евгеньевич задумался:
    А какая система счисления — самая выгодная?
    По его логике, выгодной считается та система счисления,
    в которой сумма цифр числа — наибольшая.
    А если таких систем несколько — он выбирает наименьшее основание из них.
    Ваша задача — помочь ему это выяснить!

    Формат ввода Одно натурально число.

    Формат вывода
    Одно натуральное число из диапазона [2;10] — основание
    системы счисления с максимальной выгодой.
    Если таких оснований несколько, выбирается наименьшее.
    """
    number = int(input())
    max_sum, answer = 0, 1
    for base in range(2, 11):
        num = number
        digit_sum = num % base
        while (num := num // base) > 0:
            digit_sum += num % base
        if digit_sum > max_sum:
            max_sum = digit_sum
            answer = base
    print(answer)
